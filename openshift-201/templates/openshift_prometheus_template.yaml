apiVersion: template.openshift.io/v1
kind: Template
labels:
  template: prometheus-template
message: |-
  The following service(s) have been created in your project: ${PROMETHEUS_SERVICE_NAME}.
  For more information about using this template, including OpenShift considerations, contact the rocketchat community.
metadata:
  annotations:
    description: |-
      Grafana Template for use in OpenShift 201 lab without persistent storage. 
      WARNING: Any configuration stored will be lost upon pod destruction. ConfigMaps should be used for codified configuration. 
    iconClass: icon-other-unknown
    openshift.io/display-name: prometheus-openshift201
    openshift.io/documentation-url: https://github.com/bcdevops/devops-platform-workshops
    openshift.io/long-description: This template provides a sample Grafana configuration for lab purposes.
    openshift.io/provider-display-name: BCDevOps
    openshift.io/support-url: https://github.com/bcdevops/
    tags: monitoring,grafana
  name: prometheus-template
objects:
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      component: ${PROMETHEUS_SERVICE_NAME}
      app: prometheus
      release: ${PROMETHEUS_SERVICE_NAME}
      chart: prometheus-8.11.4
      heritage: Tiller
    name: ${PROMETHEUS_SERVICE_NAME}
  data:
    alerts: |
      {}
    
    prometheus.yml: |
      global:
        evaluation_interval: 1m
        scrape_interval: 1m
        scrape_timeout: 10s
      rule_files:
      - /etc/config/rules
      - /etc/config/alerts
      scrape_configs:
      - job_name: prometheus
        static_configs:
        - targets:
          - localhost:9090
      - job_name: kubernetes-pods
        kubernetes_sd_configs:
        - role: pod
          namespaces:
              names:
                - ${NAMESPACE}
        relabel_configs:
        - action: keep
          regex: true
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_scrape
        - action: replace
          regex: (.+)
          source_labels:
          - __meta_kubernetes_pod_annotation_prometheus_io_path
          target_label: __metrics_path__
        - action: replace
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          source_labels:
          - __address__
          - __meta_kubernetes_pod_annotation_prometheus_io_port
          target_label: __address__
        - action: labelmap
          regex: __meta_kubernetes_pod_label_(.+)
        - action: replace
          source_labels:
          - __meta_kubernetes_namespace
          target_label: kubernetes_namespace
        - action: replace
          source_labels:
          - __meta_kubernetes_pod_name
          target_label: kubernetes_pod_name
    rules: |
      {}
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    labels:
      component: ${PROMETHEUS_SERVICE_NAME}
      app: ${PROMETHEUS_SERVICE_NAME}
      release: ${PROMETHEUS_SERVICE_NAME}
      chart: prometheus-8.11.4
      heritage: Tiller
    name: ${PROMETHEUS_SERVICE_NAME}
  spec:
    accessModes:
      - ReadWriteOnce
    resources:
      requests:
        storage: ${PROMETHEUS_PVC_SIZE}


- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    component: "${PROMETHEUS_SERVICE_NAME}"
    app: prometheus
    release: ${PROMETHEUS_SERVICE_NAME}
    chart: prometheus-8.11.4
    heritage: Tiller
    labels:
      app: ${PROMETHEUS_SERVICE_NAME}
    name: ${PROMETHEUS_SERVICE_NAME}
  spec:
    ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
    selector:
      app: ${PROMETHEUS_SERVICE_NAME}
      deploymentconfig: ${PROMETHEUS_SERVICE_NAME}
    sessionAffinity: None
    type: ClusterIP
- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    labels:
      app: ${PROMETHEUS_SERVICE_NAME}
    name: ${PROMETHEUS_SERVICE_NAME}
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      app: ${PROMETHEUS_SERVICE_NAME}
      deploymentconfig: ${PROMETHEUS_SERVICE_NAME}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        annotations:
          openshift.io/generated-by: OpenShiftNewApp
        labels:
          app: ${PROMETHEUS_SERVICE_NAME}
          deploymentconfig: ${PROMETHEUS_SERVICE_NAME}
      spec:
        containers:
        - name: ${PROMETHEUS_SERVICE_NAME}-configmap-reload
          image: "jimmidyson/configmap-reload:v0.2.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            {}
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: ${PROMETHEUS_SERVICE_NAME}
          image: "prom/prometheus:v2.9.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {}           
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
        terminationGracePeriodSeconds: 300
        volumes:
          - name: config-volume
            configMap:
              name: ${PROMETHEUS_SERVICE_NAME}
          - name: storage-volume
            persistentVolumeClaim:
              claimName: ${PROMETHEUS_SERVICE_NAME}
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - ${PROMETHEUS_SERVICE_NAME}
        from:
          kind: ImageStreamTag
          name: ${PROMETHEUS_SERVICE_NAME}:v2.9.2
          namespace: ${NAMESPACE}
      type: ImageChange
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      openshift.io/host.generated: "true"
    labels:
      app: ${PROMETHEUS_SERVICE_NAME}
    name: ${PROMETHEUS_SERVICE_NAME}
  spec:
    host: ${PROMETHEUS_SERVICE_NAME}-${NAMESPACE}.${ROUTE_SUBDOMAIN}
    port:
      targetPort: 9090
    to:
      kind: Service
      name: ${PROMETHEUS_SERVICE_NAME}
      weight: 100
    wildcardPolicy: None
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    generation: 2
    labels:
      app: ${PROMETHEUS_SERVICE_NAME}-configmap-reload
    name: ${PROMETHEUS_SERVICE_NAME}-configmap-reload
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: jimmidyson/configmap-reload:v0.2.2
      from:
        kind: DockerImage
        name: jimmidyson/configmap-reload:v0.2.2
      generation: 2
      importPolicy: {}
      name: v0.2.2
      referencePolicy:
        type: Source
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata:
    annotations:
      openshift.io/generated-by: OpenShiftNewApp
    generation: 2
    labels:
      app: ${PROMETHEUS_SERVICE_NAME}
    name: ${PROMETHEUS_SERVICE_NAME}
  spec:
    lookupPolicy:
      local: false
    tags:
    - annotations:
        openshift.io/imported-from: prom/prometheus:v2.9.2
      from:
        kind: DockerImage
        name: prom/prometheus:v2.9.2
      generation: 2
      importPolicy: {}
      name: v2.9.2
      referencePolicy:
        type: Source
parameters:
- description: Maximum amount of memory the container can use.
  displayName: Memory Limit
  name: MEMORY_LIMIT
  required: true
  value: 512Mi
- description: The namespace this templated is deployed into.
  displayName: Namespace
  name: NAMESPACE
  value: openshift
- description: The name of the OpenShift Service exposed for the database.
  displayName: Prometheuds Service Name
  name: PROMETHEUS_SERVICE_NAME
  required: true
  value: grafana
- description: The name of the Loki service to connect to.
  displayName: Prometheus PVC SIZE
  name: PROMETHEUS_PVC_SIZE
  required: true
  value: 1Gi
- description: Default route subdomain
  displayName: Route subdomain
  name: ROUTE_SUBDOMAIN
  required: true
  value: pathfinder.gov.bc.ca

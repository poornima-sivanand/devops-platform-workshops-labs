#!/usr/bin/env groovy

//ENV Vars
def TOOLS_NAMESPACE = "s4g19x-poornima-sivanand-openshift201-may2019-tools"
def DEV_NAMESPACE = "s4g19x-poornima-sivanand-openshift201-may2019-dev"
def PROD_NAMESPACE = "s4g19x-poornima-sivanand-openshift201-may2019-prod"
def LOKI_SERVICE  = "loki"
def PROMETHEUS_SERVICE = "prometheus"
def GRAFANA_SERVICE = "grafana"
def PROMETHEUS_PVC_SIZE = "2Gi"


//Pipeline
node {
            stage ('Deploy to Dev'){
                dir ('simple_pipeline') {
                    checkout scm
                    parallel (
                    'Deploy Loki to Dev ': {
                         sh "oc process -f openshift-201/templates/openshift_loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} | oc apply -f - -n ${DEV_NAMESPACE}"
                    },
                    'Deploy Prometheus to Dev': {
                         sh "oc process -f openshift-201/templates/openshift_prometheus_template.yaml -p PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} -p PROMETHEUS_PVC_SIZE=${PROMETHEUS_PVC_SIZE} | oc apply -f - -n ${DEV_NAMESPACE}"
                    },
                    'Deploy Graphana to Dev': {
                           sh "oc process -f openshift-201/templates/openshift_grafana_template.yaml -p GRAFANA_SERVICE_NAME=${GRAFANA_SERVICE} -p LOKI_SERVICE_NAME=${LOKI_SERVICE} -p PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} | oc apply -f - -n ${DEV_NAMESPACE}"
                    }
                )
                }
             }
            stage ('Wait for Validation '){
                dir ('simple_pipeline') {
                    sh "echo Wait for service to be up"
                    timeout (time: 500, unit: 'SECONDS'){
                        openshift.withCluster() {
                        openshift.withProject("${DEV_NAMESPACE}") {
                            def dc_loki = openshift.selector('deploymentConfig', "${LOKI_SERVICE}")
                            //this will wait until the desired replicas are available
                            dc_loki.rollout().status()
                            def dc_prometheus = openshift.selector('deploymentConfig', "${PROMETHEUS_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc_prometheus.rollout().status()
                            def dc_grafana = openshift.selector('deploymentConfig', "${GRAFANA_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc_grafana.rollout().status()                            
                        }
                        }
                    }

             }
        }
            stage ('Deploy to Prod'){
                dir ('simple_pipeline') {
                    
                    parallel (
                    'Deploy Loki to Dev ': {
                         sh "oc process -f openshift-201/templates/openshift_loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} -p NAMESPACE=${PROD_NAMESPACE} | oc apply -f - -n ${PROD_NAMESPACE}"
                    },
                    'Deploy Prometheus to Dev': {
                         sh "oc process -f openshift-201/templates/openshift_prometheus_template.yaml -p PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE} -p PROMETHEUS_PVC_SIZE=${PROMETHEUS_PVC_SIZE} -p NAMESPACE=${PROD_NAMESPACE} | oc apply -f - -n ${PROD_NAMESPACE}"
                    },
                    'Deploy Graphana to Dev': {
                           sh "oc process -f openshift-201/templates/openshift_grafana_template.yaml -p GRAFANA_SERVICE_NAME=${GRAFANA_SERVICE} -p LOKI_SERVICE_NAME=${LOKI_SERVICE} -p PROMETHEUS_SERVICE_NAME=${PROMETHEUS_SERVICE}  -p NAMESPACE=${PROD_NAMESPACE}| oc apply -f - -n ${PROD_NAMESPACE}"
                    }
                )
                    }

             }
            stage ('Validate Prod'){
                dir ('simple_pipeline') {
                    sh "oc process -f openshift-201/templates/openshift_loki_template.yaml -p  LOKI_SERVICE_NAME=${LOKI_SERVICE} -p  NAMESPACE=${PROD_NAMESPACE} | oc apply -f - -n ${PROD_NAMESPACE}"
                    sh "echo Wait for service to be up"
                    timeout (time: 500, unit: 'SECONDS'){
                        openshift.withCluster() {
                        openshift.withProject("${PROD_NAMESPACE}") {
                            def dc_loki = openshift.selector('deploymentConfig', "${LOKI_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc_loki.rollout().status()
                            def dc_prometheus = openshift.selector('deploymentConfig', "${PROMETHEUS_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc_prometheus.rollout().status()
                            def dc_grafana = openshift.selector('deploymentConfig', "${GRAFANA_SERVICE}")
                            // this will wait until the desired replicas are available
                            dc_grafana.rollout().status()      
                        }
                        }
                    }

             }
    }
}